# Docker
# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
  branches:
    include:
    - master
    - develop
pr:
  autoCancel: true
  branches:
    include:
      - master
      - develop


resources:
- repo: self

variables:
- ${{ if eq(variables['build.SourceBranchName'], 'master') }}:
  - group: "vargroup-production"
- ${{ if ne(variables['build.SourceBranchName'], 'master') }}:
  - group: "vargroup-develop"
- name: imageRepository
  value: 'front'
- name: dockerfilePath 
  value: '**/Dockerfile'
- name: deploymentName
  value: cafam-front
- name: deploymentNamespace
  value: frontend
- name: tag
  value: '$(Build.SourceVersion)'
# Agent VM image name
- name: vmImageName
  value: 'ubuntu-latest'

stages:
- stage: Preparations
  displayName: Preparations
  jobs: 
  - job: Preparations
    pool:
      vmImage: $(vmImageName)
    steps:
      - bash: 'curl -X POST --data-urlencode "payload={\"channel\": \"$(slack.channel)\", \"username\": \"$(slack.username)\", \"text\": \"*Starting Build* for $(Build.Repository.Name):$(Build.SourceBranchName) Commit:$(Build.SourceVersion)\"}" $(slack.webhook)'
        displayName: Notify slack

- stage: Test
  displayName: Test
  dependsOn: Preparations
  condition: succeeded()
  jobs:   
  - job: Test
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build test image
      inputs:
        command: build
        dockerfile: $(dockerfilePath)
        buildContext: '$(Build.Repository.LocalPath)' 
        repository: $(imageRepository)
        containerRegistry: $(dockerRegistryServiceConnection)
        arguments: --target test
        tags: |
          $(tag)
    - bash: 'docker run -v $(System.DefaultWorkingDirectory)/coverage/:/app/coverage/ -e JEST_JUNIT_OUTPUT_DIR=/app/coverage -e NODE_ENV=test $(containerRegistry)/$(imageRepository):$(tag) npm run lint'
      displayName: 'Run linters'
    - bash: 'docker run -v $(System.DefaultWorkingDirectory)/coverage/:/app/coverage/ -v $(System.DefaultWorkingDirectory)/reports/:/app/reports/ -e NODE_ENV=test $(containerRegistry)/$(imageRepository):$(tag) npm run-script test:report'
      displayName: 'Run tests'
    - bash: 'docker run --ipc=host -e NODE_ENV=test $(containerRegistry)/$(imageRepository):$(tag) npm run-script e2e'
      displayName: 'Run e2e test'
    - task: PublishTestResults@1
      displayName: 'Publish Test Results (junit.xml)'
      inputs:
        testResultsFiles: $(System.DefaultWorkingDirectory)/reports/junit.xml
    - task: PublishCodeCoverageResults@1
      displayName: 'Publish coverage (cobertura-coverage.xml)'
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: '$(System.DefaultWorkingDirectory)/coverage/cobertura-coverage.xml'
        failIfCoverageEmpty: true
    - bash: 'curl -X POST --data-urlencode "payload={\"channel\": \"$(slack.channel)\", \"username\": \"$(slack.username)\", \"text\": \"*Success tests* :green_heart: for $(Build.Repository.Name):$(Build.SourceBranchName) Commit:$(Build.SourceVersion)\"}" $(slack.webhook)'
      displayName: Success
    - bash: 'curl -X POST --data-urlencode "payload={\"channel\": \"$(slack.channel)\", \"username\": \"$(slack.username)\", \"text\": \"*Failure* at stage *Test* :prohibido_el_paso: for $(Build.Repository.Name):$(Build.SourceBranchName) Commit:$(Build.SourceVersion)\"}" $(slack.webhook)'
      displayName: Failure
      condition: failed()
   
- stage: Build
  displayName: Build release 
  dependsOn: Test
  # Only build releases for release environments and when they are not PRs
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
  jobs:   
  - job: buildRelease
    displayName: Build Release
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build release
      inputs:
        command: build
        dockerfile: $(dockerfilePath)
        buildContext: '$(Build.Repository.LocalPath)' 
        repository: $(imageRepository)
        containerRegistry: $(dockerRegistryServiceConnection)
        arguments: --target release
        tags: |
          $(tag)
    - task: Docker@2
      displayName: Push release to ACR
      inputs:
        command: push
        dockerfile: $(dockerfilePath)
        buildContext: '$(Build.Repository.LocalPath)' 
        repository: $(imageRepository)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
    - task: PublishPipelineArtifact@1 #This is of triggering kubernetes deployment, otherwise it fails.
      displayName: 'Publish Artifact: drop'

    - bash: 'curl -X POST --data-urlencode "payload={\"channel\": \"$(slack.channel)\", \"username\": \"$(slack.username)\", \"text\": \"*Failure* at stage *Build Release* :prohibido_el_paso: for  $(Build.Repository.Name):$(Build.SourceBranchName) Commit:$(Build.SourceVersion)\"}" $(slack.webhook)'
      displayName: Failure
      condition: failed()


- stage: Deploy
  displayName: Deploy
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: Deploy
    displayName: Deploy
    environment: k8s-$(env)
    pool:
      vmImage: $(vmImageName)
    strategy: 
      runOnce:
        deploy: 
          steps:
          - bash: 'curl -X POST --data-urlencode "payload={\"channel\": \"$(slack.channel)\", \"username\": \"$(slack.username)\", \"text\": \"*Starting Deploy* for  $(Build.Repository.Name):$(Build.SourceBranchName)-$(Build.BuildId)-$(Build.SourceVersion) :beers:.\"}" $(slack.webhook)'
            displayName: Notify start deploy
          - task: Kubernetes@1
            displayName: Test kubernetes deploy
            inputs:
              connectionType: Kubernetes Service Connection
              kubernetesServiceEndpoint: $(kubernetes-service-connection)-$(deploymentNamespace)
              namespace: $(deploymentNamespace)
              command: set 
              arguments: image deployment/$(deploymentName) $(deploymentName)=$(containerRegistry)/$(imageRepository):$(Build.SourceVersion) --record=true --dry-run
          - task: Kubernetes@1
            displayName: Desploy image to kubernetes
            inputs:
              connectionType: Kubernetes Service Connection
              kubernetesServiceEndpoint: $(kubernetes-service-connection)-$(deploymentNamespace)
              namespace: $(deploymentNamespace)
              command: set 
              arguments: image deployment/$(deploymentName) $(deploymentName)=$(containerRegistry)/$(imageRepository):$(Build.SourceVersion) --record=true
          - bash: 'curl -X POST --data-urlencode "payload={\"channel\": \"$(slack.channel)\", \"username\": \"$(slack.username)\", \"text\": \"*Deploy Succesfully* :beers: for  $(Build.Repository.Name):$(Build.SourceBranchName)-$(Build.BuildId)-$(Build.SourceVersion)\"}" $(slack.webhook)'
            displayName: Success notification
          - bash: 'curl -X POST --data-urlencode "payload={\"channel\": \"$(slack.channel)\", \"username\": \"$(slack.username)\", \"text\": \"*Failure* at stage *Deploy* :prohibido_el_paso: for  $(Build.Repository.Name):$(Build.SourceBranchName) Commit:$(Build.SourceVersion)\"}" $(slack.webhook)'
            displayName: Failure
            condition: failed()