// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Pruebas en el componente PasoCincoDatosPersonales Debe de mostrarse correctamente el componente 1`] = `
<Provider
  store={
    Object {
      "dispatch": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
      Symbol(observable): [Function],
    }
  }
>
  <PasoCincoDatosPersonales
    validate={true}
  >
    <div
      className="contedor-fixed-tab"
    >
      <div
        className="contedor-solicitud"
      >
        <div
          className="container p-0"
        >
          <form
            noValidate={true}
            onSubmit={[Function]}
          >
            <h2
              className="color-blue-storm"
            >
              ¡Sólo falta crear tu cuenta!
            </h2>
            <p
              className="color-dark-gray sub"
            >
              Tu usuario será el RFC con el que facturas y crearás una contraseña. Con tu cuenta podrás retomar el proceso en cualquier momento.
            </p>
            <div
              className="row no-gutters"
            >
              <div
                className="col-lg-3 col-md-4 col-sm-12 col-xs-12 "
              >
                <p
                  className="input color-gray"
                >
                  Mi RFC es
                </p>
              </div>
              <div
                className="col-lg-6 col-md-6  col-xs-12 pr-lg-2 pr-md-2 pb-sm-3 pb-xs-3"
              >
                <TextField
                  afterBlur={[Function]}
                  capitalize={false}
                  disabled={false}
                  format="rfcformatter"
                  formulario={
                    Object {
                      "dirty": false,
                      "errors": Object {},
                      "getFieldHelpers": [Function],
                      "getFieldMeta": [Function],
                      "getFieldProps": [Function],
                      "handleBlur": [Function],
                      "handleChange": [Function],
                      "handleReset": [Function],
                      "handleSubmit": [Function],
                      "initialErrors": Object {},
                      "initialStatus": undefined,
                      "initialTouched": Object {},
                      "initialValues": Object {
                        "aceptoTerminos": null,
                        "confirmarContrasena": "",
                        "contrasena": "",
                        "rfc": "",
                      },
                      "isSubmitting": false,
                      "isValid": true,
                      "isValidating": false,
                      "registerField": [Function],
                      "resetForm": [Function],
                      "setErrors": [Function],
                      "setFieldError": [Function],
                      "setFieldTouched": [Function],
                      "setFieldValue": [Function],
                      "setFormikState": [Function],
                      "setStatus": [Function],
                      "setSubmitting": [Function],
                      "setTouched": [Function],
                      "setValues": [Function],
                      "status": undefined,
                      "submitCount": 0,
                      "submitForm": [Function],
                      "touched": Object {},
                      "unregisterField": [Function],
                      "validateField": [Function],
                      "validateForm": [Function],
                      "validateOnBlur": true,
                      "validateOnChange": true,
                      "validateOnMount": false,
                      "values": Object {
                        "aceptoTerminos": null,
                        "confirmarContrasena": "",
                        "contrasena": "",
                        "rfc": "",
                      },
                    }
                  }
                  inverted={false}
                  label="TLMF160693H17"
                  maxlength={13}
                  name="rfc"
                  optional={false}
                  paste={true}
                  readonly={false}
                  size="big"
                  type="text"
                  validation={false}
                >
                  <div
                    className="group"
                  >
                    <input
                      autoComplete="off"
                      className="input-big  false "
                      disabled={false}
                      id="rfc"
                      maxLength={13}
                      name="rfc"
                      onBeforeInput={[Function]}
                      onBlur={[Function]}
                      onChange={[Function]}
                      onFocus={[Function]}
                      onKeyDown={[Function]}
                      onPaste={[Function]}
                      placeholder="TLMF160693H17"
                      readOnly={false}
                      tabIndex="0"
                      type="text"
                      value=""
                    />
                    <span
                      className="help-text"
                    >
                       
                    </span>
                  </div>
                </TextField>
              </div>
              <div
                className="col-lg-5 col-md-6 col-sm-12 col-xs-12 "
              >
                <p
                  className="input color-gray"
                >
                  Mi contraseña será
                </p>
              </div>
              <div
                className="col-lg-5 col-md-5 col-xs-12"
              >
                <TextField
                  afterBlur={[Function]}
                  capitalize={false}
                  disabled={false}
                  format="passwordspace"
                  formulario={
                    Object {
                      "dirty": false,
                      "errors": Object {},
                      "getFieldHelpers": [Function],
                      "getFieldMeta": [Function],
                      "getFieldProps": [Function],
                      "handleBlur": [Function],
                      "handleChange": [Function],
                      "handleReset": [Function],
                      "handleSubmit": [Function],
                      "initialErrors": Object {},
                      "initialStatus": undefined,
                      "initialTouched": Object {},
                      "initialValues": Object {
                        "aceptoTerminos": null,
                        "confirmarContrasena": "",
                        "contrasena": "",
                        "rfc": "",
                      },
                      "isSubmitting": false,
                      "isValid": true,
                      "isValidating": false,
                      "registerField": [Function],
                      "resetForm": [Function],
                      "setErrors": [Function],
                      "setFieldError": [Function],
                      "setFieldTouched": [Function],
                      "setFieldValue": [Function],
                      "setFormikState": [Function],
                      "setStatus": [Function],
                      "setSubmitting": [Function],
                      "setTouched": [Function],
                      "setValues": [Function],
                      "status": undefined,
                      "submitCount": 0,
                      "submitForm": [Function],
                      "touched": Object {},
                      "unregisterField": [Function],
                      "validateField": [Function],
                      "validateForm": [Function],
                      "validateOnBlur": true,
                      "validateOnChange": true,
                      "validateOnMount": false,
                      "values": Object {
                        "aceptoTerminos": null,
                        "confirmarContrasena": "",
                        "contrasena": "",
                        "rfc": "",
                      },
                    }
                  }
                  inverted={false}
                  label="Contraseña"
                  maxlength={20}
                  name="contrasena"
                  optional={false}
                  paste={false}
                  readonly={false}
                  size="big"
                  type="password"
                  validation={false}
                >
                  <div
                    className="group"
                  >
                    <input
                      autoComplete="off"
                      className="input-big-password  false "
                      disabled={false}
                      id="contrasena"
                      maxLength={20}
                      name="contrasena"
                      onBeforeInput={[Function]}
                      onBlur={[Function]}
                      onChange={[Function]}
                      onFocus={[Function]}
                      onKeyDown={[Function]}
                      onPaste={[Function]}
                      placeholder="Contraseña"
                      readOnly={false}
                      tabIndex="0"
                      type="password"
                      value=""
                    />
                    <span
                      className="help-text"
                    >
                       
                    </span>
                    <button
                      className="button-password-inverted"
                      onClick={[Function]}
                      type="button"
                    >
                      <SvgHidenPassword>
                        <svg
                          fill="none"
                          height={24}
                          viewBox="0 0 24 24"
                          width={24}
                        >
                          <path
                            d="M22 9l-1.8 2.159A10.675 10.675 0 0112 15v0a10.675 10.675 0 01-8.2-3.841L2 9"
                            stroke="gray"
                            strokeLinecap="round"
                            strokeWidth={2}
                          />
                          <path
                            d="M1.2 15.4a1 1 0 001.6 1.2l-1.6-1.2zm1.6 1.2l3-4-1.6-1.2-3 4 1.6 1.2zM22.8 15.4a1 1 0 01-1.6 1.2l1.6-1.2zm-1.6 1.2l-3-4 1.6-1.2 3 4-1.6 1.2zM7.03 18.758a1 1 0 101.94.485l-1.94-.485zm1.94.485l1-4-1.94-.486-1 4 1.94.485zM16.97 18.758a1 1 0 11-1.94.485l1.94-.485zm-1.94.485l-1-4 1.94-.486 1 4-1.94.485z"
                            fill="gray"
                          />
                        </svg>
                      </SvgHidenPassword>
                    </button>
                  </div>
                </TextField>
              </div>
              <div
                className="col-lg-8 col-md-11 "
              >
                <ValidatePassword
                  field="contrasena"
                  formulario={
                    Object {
                      "dirty": false,
                      "errors": Object {},
                      "getFieldHelpers": [Function],
                      "getFieldMeta": [Function],
                      "getFieldProps": [Function],
                      "handleBlur": [Function],
                      "handleChange": [Function],
                      "handleReset": [Function],
                      "handleSubmit": [Function],
                      "initialErrors": Object {},
                      "initialStatus": undefined,
                      "initialTouched": Object {},
                      "initialValues": Object {
                        "aceptoTerminos": null,
                        "confirmarContrasena": "",
                        "contrasena": "",
                        "rfc": "",
                      },
                      "isSubmitting": false,
                      "isValid": true,
                      "isValidating": false,
                      "registerField": [Function],
                      "resetForm": [Function],
                      "setErrors": [Function],
                      "setFieldError": [Function],
                      "setFieldTouched": [Function],
                      "setFieldValue": [Function],
                      "setFormikState": [Function],
                      "setStatus": [Function],
                      "setSubmitting": [Function],
                      "setTouched": [Function],
                      "setValues": [Function],
                      "status": undefined,
                      "submitCount": 0,
                      "submitForm": [Function],
                      "touched": Object {},
                      "unregisterField": [Function],
                      "validateField": [Function],
                      "validateForm": [Function],
                      "validateOnBlur": true,
                      "validateOnChange": true,
                      "validateOnMount": false,
                      "values": Object {
                        "aceptoTerminos": null,
                        "confirmarContrasena": "",
                        "contrasena": "",
                        "rfc": "",
                      },
                    }
                  }
                />
              </div>
              <div
                className="col-lg-5 col-md-6 col-xs-12 "
              >
                <p
                  className="input color-gray"
                >
                  Confirmo que será
                </p>
              </div>
              <div
                className="col-lg-5 col-md-5 col-xs-12 pb-sm-3 pb-xs-3"
              >
                <TextField
                  afterBlur={[Function]}
                  capitalize={false}
                  disabled={false}
                  format="passwordspace"
                  formulario={
                    Object {
                      "dirty": false,
                      "errors": Object {},
                      "getFieldHelpers": [Function],
                      "getFieldMeta": [Function],
                      "getFieldProps": [Function],
                      "handleBlur": [Function],
                      "handleChange": [Function],
                      "handleReset": [Function],
                      "handleSubmit": [Function],
                      "initialErrors": Object {},
                      "initialStatus": undefined,
                      "initialTouched": Object {},
                      "initialValues": Object {
                        "aceptoTerminos": null,
                        "confirmarContrasena": "",
                        "contrasena": "",
                        "rfc": "",
                      },
                      "isSubmitting": false,
                      "isValid": true,
                      "isValidating": false,
                      "registerField": [Function],
                      "resetForm": [Function],
                      "setErrors": [Function],
                      "setFieldError": [Function],
                      "setFieldTouched": [Function],
                      "setFieldValue": [Function],
                      "setFormikState": [Function],
                      "setStatus": [Function],
                      "setSubmitting": [Function],
                      "setTouched": [Function],
                      "setValues": [Function],
                      "status": undefined,
                      "submitCount": 0,
                      "submitForm": [Function],
                      "touched": Object {},
                      "unregisterField": [Function],
                      "validateField": [Function],
                      "validateForm": [Function],
                      "validateOnBlur": true,
                      "validateOnChange": true,
                      "validateOnMount": false,
                      "values": Object {
                        "aceptoTerminos": null,
                        "confirmarContrasena": "",
                        "contrasena": "",
                        "rfc": "",
                      },
                    }
                  }
                  inverted={false}
                  label="Contraseña"
                  maxlength={20}
                  name="confirmarContrasena"
                  optional={false}
                  paste={false}
                  readonly={false}
                  size="big"
                  type="password"
                  validation={false}
                >
                  <div
                    className="group"
                  >
                    <input
                      autoComplete="off"
                      className="input-big-password  false "
                      disabled={false}
                      id="confirmarContrasena"
                      maxLength={20}
                      name="confirmarContrasena"
                      onBeforeInput={[Function]}
                      onBlur={[Function]}
                      onChange={[Function]}
                      onFocus={[Function]}
                      onKeyDown={[Function]}
                      onPaste={[Function]}
                      placeholder="Contraseña"
                      readOnly={false}
                      tabIndex="0"
                      type="password"
                      value=""
                    />
                    <span
                      className="help-text"
                    >
                       
                    </span>
                    <button
                      className="button-password-inverted"
                      onClick={[Function]}
                      type="button"
                    >
                      <SvgHidenPassword>
                        <svg
                          fill="none"
                          height={24}
                          viewBox="0 0 24 24"
                          width={24}
                        >
                          <path
                            d="M22 9l-1.8 2.159A10.675 10.675 0 0112 15v0a10.675 10.675 0 01-8.2-3.841L2 9"
                            stroke="gray"
                            strokeLinecap="round"
                            strokeWidth={2}
                          />
                          <path
                            d="M1.2 15.4a1 1 0 001.6 1.2l-1.6-1.2zm1.6 1.2l3-4-1.6-1.2-3 4 1.6 1.2zM22.8 15.4a1 1 0 01-1.6 1.2l1.6-1.2zm-1.6 1.2l-3-4 1.6-1.2 3 4-1.6 1.2zM7.03 18.758a1 1 0 101.94.485l-1.94-.485zm1.94.485l1-4-1.94-.486-1 4 1.94.485zM16.97 18.758a1 1 0 11-1.94.485l1.94-.485zm-1.94.485l-1-4 1.94-.486 1 4-1.94.485z"
                            fill="gray"
                          />
                        </svg>
                      </SvgHidenPassword>
                    </button>
                  </div>
                </TextField>
              </div>
            </div>
            <div
              className="row no-gutters"
            >
              <CheckTextBox
                formulario={
                  Object {
                    "dirty": false,
                    "errors": Object {},
                    "getFieldHelpers": [Function],
                    "getFieldMeta": [Function],
                    "getFieldProps": [Function],
                    "handleBlur": [Function],
                    "handleChange": [Function],
                    "handleReset": [Function],
                    "handleSubmit": [Function],
                    "initialErrors": Object {},
                    "initialStatus": undefined,
                    "initialTouched": Object {},
                    "initialValues": Object {
                      "aceptoTerminos": null,
                      "confirmarContrasena": "",
                      "contrasena": "",
                      "rfc": "",
                    },
                    "isSubmitting": false,
                    "isValid": true,
                    "isValidating": false,
                    "registerField": [Function],
                    "resetForm": [Function],
                    "setErrors": [Function],
                    "setFieldError": [Function],
                    "setFieldTouched": [Function],
                    "setFieldValue": [Function],
                    "setFormikState": [Function],
                    "setStatus": [Function],
                    "setSubmitting": [Function],
                    "setTouched": [Function],
                    "setValues": [Function],
                    "status": undefined,
                    "submitCount": 0,
                    "submitForm": [Function],
                    "touched": Object {},
                    "unregisterField": [Function],
                    "validateField": [Function],
                    "validateForm": [Function],
                    "validateOnBlur": true,
                    "validateOnChange": true,
                    "validateOnMount": false,
                    "values": Object {
                      "aceptoTerminos": null,
                      "confirmarContrasena": "",
                      "contrasena": "",
                      "rfc": "",
                    },
                  }
                }
                name="aceptoTerminos"
              >
                <div
                  className="card-simple-blue-light container-check-text"
                >
                  <div
                    className="container-check"
                  >
                    <input
                      checked={false}
                      className=" my-check"
                      id="aceptoTerminos"
                      name="aceptoTerminos"
                      onChange={[Function]}
                      type="checkbox"
                    />
                    <label
                      className="label"
                      htmlFor="aceptoTerminos"
                    >
                       
                    </label>
                  </div>
                  <div>
                    <p
                      className="m-0"
                    >
                      <span>
                        Acepto: (1) los 
                      </span>
                      <a
                        className="link"
                        rel="noreferrer"
                        target="_blank"
                      >
                        Términos y Condiciones
                      </a>
                      <span>
                        , (2) el 
                      </span>
                      <Component
                        href="/aviso-privacidad"
                      >
                        <a
                          className="link"
                        >
                          Aviso de Privacidad
                        </a>
                      </Component>
                      <span>
                        , (3) tu Solicitud de Crédito y que (4) los productos y/o servicios que ofrece BanCoppel serán promocionados, aceptados y/o modificados a través de medios electrónicos, telefónicos, digitales y/o cualquier otra tecnología.
                      </span>
                    </p>
                  </div>
                </div>
                <span
                  className="color-red"
                >
                   
                </span>
              </CheckTextBox>
            </div>
            <div
              className="flex-column-center-config my-3 "
            >
              <button
                aria-label="Avanzar"
                className="btn-medium"
                disabled={true}
                type="submit"
              >
                <span>
                  Crea tu contraseña
                </span>
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </PasoCincoDatosPersonales>
  <ModalActualizar>
    <Modal
      closeable={true}
      onClose={[Function]}
      openModal={false}
      setOpenModal={[Function]}
    />
  </ModalActualizar>
</Provider>
`;
